// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array data;
    field int max_len, len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int max_length) {
        let max_len = max_length;
        if (0 < max_len) {
            let data = Array.new(max_len);
        }
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (0 < max_len) {
            do data.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (isOutOfBounds(j)) {
            do Sys.error(15);
        }
        return data[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (isOutOfBounds(j)) {
            do Sys.error(16);
        }
        let data[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len = max_len) {
            do Sys.error(17);
        }
        let data[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len = 0) {
            do Sys.error(18);
        }
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, j;
        var boolean is_neg;

        // TODO: better bounds checks, ignore trailing characters
        let val = 0;
        if (charAt(0) = 45 /*minus character*/) {
            let j = 1;
            let is_neg = true;
        } else {
            let j = 0;
        }
        while (j < len) {
            let val = (val * 10) + (data[j] - 48);
            let j = j + 1;
        }
        if (is_neg) {
            let val = -val;
        }
        return val;
    }

    function bool is_digit(char c) {
        return ~(c < 48) & ~(57 < c);
    }

    function int mod10(int x) {
        return x - ((x / 10) * 10);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        do _setInt(val);
        return;
    }

    method void _setInt(int val) {
        var int lastDigit;

        if (val < 10) {
            if (val < 0) {
                do appendChar(45 /*minus character*/);
                let val = -val;
                do _setInt(val / 10);
            }
        } else {
            do _setInt(val / 10);
        }
        do appendChar(String.mod10(val)+48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    method boolean isOutOfBounds(int j) {
        return (j < 0) | ((len-1) < j);
    }
}
