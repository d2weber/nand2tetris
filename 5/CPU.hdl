// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    DMux(in=true, sel=instruction[15], a=isAinstr, b=isCinstr);

    // instruction[3]: store M
    And(a=isCinstr, b=instruction[3], out=writeM);

    Mux16(a=aluOut, b[0..14]=instruction[0..14], sel=isAinstr, out=inA);

    // instruction[5]: store A
    And(a=isCinstr, b=instruction[5], out=isCandStoreA);
    Or(a=isAinstr, b=isCandStoreA, out=aLoad);
    ARegister(in=inA, load=aLoad, out=outA, out[0..14]=addressM);

    // instruction[12]: use_a (a==0)
    Mux16(a=outA, b=inM, sel=instruction[12], out=AorM);

    // instruction[4]: store D
    And(a=isCinstr, b=instruction[4], out=dLoad);
    DRegister(in=aluOut, load=dLoad, out=dOut);

    ALU(x=dOut, y=AorM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f =instruction[7],
        no=instruction[6],
        out=aluOut,
        out=outM,
        zr=aluEq,
        ng=aluLt
     );


    Or(a=aluEq, b=aluLt, out=aluLe);
    Not(in=aluLe, out=aluGt);

    And(a=instruction[0], b=aluGt, out=jgt);
    And(a=instruction[1], b=aluEq, out=jeq);
    And(a=instruction[2], b=aluLt, out=jlt);
    Or8Way(in[0]=jgt, in[1]=jeq, in[2]=jlt, out=jumpAny);
    And(a=isCinstr, b=jumpAny, out=PcLoad);

    PC(in=outA, load=PcLoad, inc=true, reset=reset, out[0..14]=pc);
}
