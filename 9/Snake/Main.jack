class Main {
	static int direction; // 1=left, 2=up, 3=right, 4=down
	static GridP targ;
	static int delay, nDelays;
	static String pressAnyKeyToBeginStr, pressToPlayAgainStr, gameOverStr;

	function void main() {
		var SnakeBody snake;

		let pressAnyKeyToBeginStr = "Press any key to begin.";
		let pressToPlayAgainStr = "Press any key to play again.";
		let gameOverStr = "Game Over.";
		do Main.startScreen();

		while (true) {
			do Screen.clearScreen();
			let direction = 3;
			do Main.newTarget(); // Might undraw old target
			let snake = SnakeBody.new();
			do Main.adjustSpeed(snake.score());

			while (snake.active()) {
				if (snake.step(direction, targ)) {
					do Main.newTarget();
					do Main.adjustSpeed(snake.score());
					do snake.printScore();
				}
				do Main.readAndUpdateDirection();
			}

			do Main.gameOverScreen();
			do snake.dispose();
		}
		return;
	}

	// TODO: Fix leaking strings in start and end screen.
	function void startScreen() {
		var int seed;
		do Output.moveCursor(14,19);
		do Output.printString(pressAnyKeyToBeginStr);
		let seed = 1;
		while (Keyboard.keyPressed() = 0) {let seed = seed + 1;}
		do Output.moveCursor(14,19);

		do LCGRandom.setSeed(Math.abs(seed));
		return;
	}

	function void gameOverScreen() {
		var int i;

		do Output.moveCursor(10, 28);
		do Output.printString(gameOverStr);
		
		do Output.moveCursor(14,19);
		do Output.printString(pressToPlayAgainStr);
		do Sys.wait(700); // Avoid unwanted restart;
		while (Keyboard.keyPressed() = 0) { do Sys.wait(5); }
		return;
	}

	function void adjustSpeed(int score) {
		var int frequency; // aimed number of updates in 10s

		let frequency = 50 + (2*score);
		if (200<frequency) {let frequency = 200;}
		let nDelays = 3333/frequency;
		let delay = 3;
		return;
	}

	function void newTarget() {
		if (~(targ=null)) {
			do targ.disposeKeepDrawn(); // Head is on this field
		}
		let targ = GridP.new(
			LCGRandom.randRange(0,GridP.max_x()),
			LCGRandom.randRange(0,GridP.max_y())
		);
		return;
	}

	function void readAndUpdateDirection() {
		var int i;
		var char key;

		let i = 0;
		while(i<nDelays) {
			let i = i+1;

			let key = Keyboard.keyPressed();
	        if (key = 130) { let direction = 1; }   // left arrow
	        if (key =  65) { let direction = 1; }   // A
	        if (key = 131) { let direction = 2; }   // up arrow
	        if (key =  87) { let direction = 2; }   // W
	        if (key = 132) { let direction = 3; }   // right arrow
	        if (key =  68) { let direction = 3; }   // D
	        if (key = 133) { let direction = 4; }   // down arrow
	        if (key =  83) { let direction = 4; }   // S

			// Draw white line in the corner to avoid gliches
			do Memory.poke(16384, 0);

			do Sys.wait(delay);
		}
		return;
	}
}
