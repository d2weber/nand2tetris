class SnakeBody {
	field Array body;
	field int i, length, head_idx;
	field bool active;
	static String scoreStr;
	
	constructor SnakeBody new() {
		var GridP head;
		let body = Array.new((GridP.max_x()+1)*(GridP.max_y()+1));
		let head = GridP.new(14,8);
		let body[0] = head;
		let head = head.right();
		let body[1] = head;
		let head = head.right();
		let body[2] = head;
		let head = head.right();
		let body[3] = head;
		let head_idx = 3;
		let length = 4;
		let scoreStr = "Score: ";
		do printScore();
		let active = true;
		return this;
	}

	method void printScore() {
		do Output.moveCursor(0,0);
		do Output.printString(scoreStr);
		do Output.printInt(score());
		return;
	}

	// Returns whether target has been eaten
	method bool step(int direction, GridP targ) {
		var bool hasBeenEaten;
		var GridP head, tail;

		let hasBeenEaten = targ.eq(head());
		let head = maybeNewHead(direction);
		if (head=null) {
			let active = false;
			return false;
		}
		do advanceHeadIdx();
		if (hasBeenEaten) {
			do makeSpaceForHead();
		}
		else
		{
			let tail = body[head_idx];
			if (targ.eq(tail)) {
				// Mitigate spawned targ on snake
				do tail.disposeKeepDrawn();
			} else {
				do tail.dispose();
			}
		}
		let body[head_idx] = head;
		return hasBeenEaten;
	}

	method bool active() {
		return active;
	}

	method int score() {
		return length-4;
	}

	method GridP head() {
		return body[head_idx];
	}

	method void makeSpaceForHead() {
		let i = length;
		while (head_idx < i) {
			let body[i] = body[i-1];
			let i = i - 1;
		}
		let length = length + 1;
		return;
	}

	method void disposeTail() {
		var GridP tail;
		return;
	}

	method GridP maybeNewHead(int direction) {
		var GridP head;
		let head = body[head_idx];
		if (direction=1) {let head = head.left();}
		if (direction=2) {let head = head.above();}
		if (direction=3) {let head = head.right();}
		if (direction=4) {let head = head.below();}

		// We're out of bounds
		if (head=null) {
			return null;
		}

		// Check if we bit our tail
		let i = 0;
		while (i<length) {
			if (head.eq(body[i])) {
				return null;
			}
			let i = i+1;
		}

		return head;
	}

	method void advanceHeadIdx() {
		let head_idx = head_idx + 1;
		if (head_idx=length) {
			let head_idx = head_idx - length;
		}
		return;
	}

	method void dispose() {
		var int i;
		var GridP p;

		let i = 0;
		while (i<length) {
			let p = body[i];
			do p.dispose();
			let i = i + 1;
		}
		do body.dispose();
		do Memory.deAlloc(this);
		return;
	}
}
